/* Copyright 2015 The math21 Authors. All Rights Reserved.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
==============================================================================*/

// generated by op_cpu.cc

#include "template_opencl_02.h"
#include "op_opencl.h"

#ifdef MATH21_FLAG_USE_OPENCL

using namespace math21;

void math21_generic_tensor_f_shrink_opencl(NumN fname, NumN n, PointerVoidInputWrapper x, PointerVoidWrapper y,
                                           NumN dims_x, PointerNumNInputWrapper dx, NumN dims_y,
                                           PointerNumNInputWrapper dy,
                                           NumN nb, PointerNumNInputWrapper b,
                                           NumN nv, NumN dims_v, PointerNumNInputWrapper dv, NumN type) {
    if (type == m21_type_NumR) {
        math21_template_tensor_f_shrink_opencl<NumR>(fname, n, x, y,
                                                     dims_x, dx, dims_y, dy, nb, b, nv, dims_v, dv);
    } else if (type == m21_type_NumR32) {
        math21_template_tensor_f_shrink_opencl<NumR32>(fname, n, x, y,
                                                       dims_x, dx, dims_y, dy, nb, b, nv, dims_v, dv);
    } else if (type == m21_type_NumR64) {
        math21_template_tensor_f_shrink_opencl<NumR64>(fname, n, x, y,
                                                       dims_x, dx, dims_y, dy, nb, b, nv, dims_v, dv);
    } else {
        math21_tool_assert(0);
    }
}

void math21_generic_tensor_f_inner_product_like_shrink_opencl(
        NumN fname, NumN n,
        PointerVoidInputWrapper x1, PointerVoidInputWrapper x2, PointerVoidWrapper y,
        NumN dims_x, PointerNumNInputWrapper dx, NumN dims_y, PointerNumNInputWrapper dy,
        NumN nb, PointerNumNInputWrapper b,
        NumN nv, NumN dims_v, PointerNumNInputWrapper dv, NumN type) {
    if (type == m21_type_NumR) {
        math21_template_tensor_f_inner_product_like_shrink_opencl<NumR>(
                fname, n, x1, x2, y,
                dims_x, dx, dims_y, dy, nb, b, nv, dims_v, dv);
    } else if (type == m21_type_NumR32) {
        math21_template_tensor_f_inner_product_like_shrink_opencl<NumR32>(
                fname, n, x1, x2, y,
                dims_x, dx, dims_y, dy, nb, b, nv, dims_v, dv);
    } else if (type == m21_type_NumR64) {
        math21_template_tensor_f_inner_product_like_shrink_opencl<NumR64>(
                fname, n, x1, x2, y,
                dims_x, dx, dims_y, dy, nb, b, nv, dims_v, dv);
    } else {
        math21_tool_assert(0);
    }
}

void math21_generic_tensor_f_with_broadcast_in_dn_opencl(NumN fname, NumN n,
                                                         PointerVoidInputWrapper x1,
                                                         PointerVoidInputWrapper x2,
                                                         PointerVoidWrapper y,
                                                         NumN dims_x1, PointerNumNInputWrapper dx1,
                                                         NumN dims_x2, PointerNumNInputWrapper dx2,
                                                         NumN dims_y, PointerNumNInputWrapper dy, NumN type) {
    if (type == m21_type_NumN8) {
        math21_template_tensor_f_with_broadcast_in_dn_opencl<NumN8>(fname, n,
                                                                   x1, x2,
                                                                   y, dims_x1, dx1, dims_x2, dx2,
                                                                   dims_y, dy);
    }else if (type == m21_type_NumR) {
        math21_template_tensor_f_with_broadcast_in_dn_opencl<NumR>(fname, n,
                                                                   x1, x2,
                                                                   y, dims_x1, dx1, dims_x2, dx2,
                                                                   dims_y, dy);
    } else if (type == m21_type_NumR32) {
        math21_template_tensor_f_with_broadcast_in_dn_opencl<NumR32>(fname, n,
                                                                     x1, x2,
                                                                     y, dims_x1, dx1, dims_x2, dx2,
                                                                     dims_y, dy);
    } else if (type == m21_type_NumR64) {
        math21_template_tensor_f_with_broadcast_in_dn_opencl<NumR64>(fname, n,
                                                                     x1, x2,
                                                                     y, dims_x1, dx1, dims_x2, dx2,
                                                                     dims_y, dy);
    } else {
        math21_tool_assert(0);
    }
}

void math21_generic_vector_f_add_like_opencl(NumN fname, NumN n,
                                             PointerVoidInputWrapper x1,
                                             PointerVoidInputWrapper x2,
                                             PointerVoidWrapper y, NumN type) {
    if (type == m21_type_NumN8) {
        math21_template_vector_f_add_like_opencl<NumN8>(fname, n,
                                                       x1, x2,
                                                       y);
    }else if (type == m21_type_NumR) {
        math21_template_vector_f_add_like_opencl<NumR>(fname, n,
                                                       x1, x2,
                                                       y);
    } else if (type == m21_type_NumR32) {
        math21_template_vector_f_add_like_opencl<NumR32>(fname, n,
                                                         x1, x2,
                                                         y);
    } else if (type == m21_type_NumR64) {
        math21_template_vector_f_add_like_opencl<NumR64>(fname, n,
                                                         x1, x2,
                                                         y);
    } else {
        math21_tool_assert(0);
    }
}

void math21_generic_vector_f_sin_like_opencl(NumN fname, NumN n,
                                             PointerVoidInputWrapper x1,
                                             PointerVoidWrapper y, NumN type) {
    if (type == m21_type_NumR) {
        math21_template_vector_f_sin_like_opencl<NumR>(fname, n,
                                                       x1,
                                                       y);
    } else if (type == m21_type_NumR32) {
        math21_template_vector_f_sin_like_opencl<NumR32>(fname, n,
                                                         x1,
                                                         y);
    } else if (type == m21_type_NumR64) {
        math21_template_vector_f_sin_like_opencl<NumR64>(fname, n,
                                                         x1,
                                                         y);
    } else {
        math21_tool_assert(0);
    }
}

void math21_generic_vector_f_kx_like_opencl(NumN fname, NumN n,
                                            NumR k,
                                            PointerVoidInputWrapper x1,
                                            PointerVoidWrapper y, NumN type) {
    if (type == m21_type_NumR) {
        math21_template_vector_f_kx_like_opencl<NumR>(fname, n, (NumR) k,
                                                      x1,
                                                      y);
    } else if (type == m21_type_NumR32) {
        math21_template_vector_f_kx_like_opencl<NumR32>(fname, n, (NumR32) k,
                                                        x1,
                                                        y);
    } else if (type == m21_type_NumR64) {
        math21_template_vector_f_kx_like_opencl<NumR64>(fname, n, (NumR64) k,
                                                        x1,
                                                        y);
    } else {
        math21_tool_assert(0);
    }
}

#endif