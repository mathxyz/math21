/* Copyright 2015 The math21 Authors. All Rights Reserved.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
==============================================================================*/

// generated by op_cpu.cc

#include "template_opencl_01.h"
#include "op_opencl.h"

#ifdef MATH21_FLAG_USE_OPENCL

using namespace math21;

void math21_generic_tensor_sub_set_or_get_opencl(NumN n, PointerVoidWrapper x, PointerVoidWrapper y, NumN dims,
                                                 PointerNumNInputWrapper dx, PointerNumNInputWrapper dy,
                                                 PointerNumNInputWrapper offset, NumB isGet, NumN type) {
    if (type == m21_type_NumR) {
        math21_template_tensor_sub_set_or_get_opencl<NumR>(n, x, y, dims, dx, dy, offset, isGet);
    } else if (type == m21_type_NumR32) {
        math21_template_tensor_sub_set_or_get_opencl<NumR32>(n, x, y, dims, dx, dy, offset, isGet);
    } else if (type == m21_type_NumR64) {
        math21_template_tensor_sub_set_or_get_opencl<NumR64>(n, x, y, dims, dx, dy, offset, isGet);
    } else {
        math21_tool_assert(0);
    }
}

void math21_generic_vector_kx_opencl(NumN n, NumR k, PointerVoidWrapper x, NumN stride_x, NumN type) {
    if (type == m21_type_NumR) {
        math21_template_vector_kx_opencl<NumR>(n, (NumR) k, x, stride_x);
    } else if (type == m21_type_NumR32) {
        math21_template_vector_kx_opencl<NumR32>(n, (NumR32) k, x, stride_x);
    } else if (type == m21_type_NumR64) {
        math21_template_vector_kx_opencl<NumR64>(n, (NumR64) k, x, stride_x);
    } else {
        math21_tool_assert(0);
    }
}

void math21_generic_vector_kx_add_y_opencl(NumN n, NumR k, PointerVoidInputWrapper x, NumN stride_x,
                                           PointerVoidWrapper y, NumN stride_y, NumN type) {
    if (type == m21_type_NumR) {
        math21_template_vector_kx_add_y_opencl<NumR>(n, (NumR) k, x, stride_x, y, stride_y);
    } else if (type == m21_type_NumR32) {
        math21_template_vector_kx_add_y_opencl<NumR32>(n, (NumR32) k, x, stride_x, y, stride_y);
    } else if (type == m21_type_NumR64) {
        math21_template_vector_kx_add_y_opencl<NumR64>(n, (NumR64) k, x, stride_x, y, stride_y);
    } else {
        math21_tool_assert(0);
    }
}

void math21_generic_vector_set_by_vector_opencl(
        NumN n, PointerVoidInputWrapper x, NumN stride_x, PointerVoidWrapper y, NumN stride_y,
        NumN offset_x, NumN offset_y, NumN type1, NumN type2) {
    if (type1 == m21_type_NumN8) {
        if (type2 == m21_type_NumN8) {
            math21_template_vector_set_by_vector_opencl<NumN8, NumN8>(n, x, stride_x, y, stride_y,
                                                                      offset_x, offset_y);
        } else if (type2 == m21_type_NumR) {
            math21_template_vector_set_by_vector_opencl<NumN8, NumR>(n, x, stride_x, y, stride_y,
                                                                     offset_x, offset_y);
        } else {
            math21_tool_assert(0);
        }
    } else if (type1 == m21_type_NumN) {
        if (type2 == m21_type_NumN8) {
            math21_template_vector_set_by_vector_opencl<NumN, NumN8>(n, x, stride_x, y, stride_y,
                                                                     offset_x, offset_y);
        } else if (type2 == m21_type_NumN) {
            math21_template_vector_set_by_vector_opencl<NumN, NumN>(n, x, stride_x, y, stride_y,
                                                                    offset_x, offset_y);
        } else if (type2 == m21_type_NumR) {
            math21_template_vector_set_by_vector_opencl<NumN, NumR>(n, x, stride_x, y, stride_y,
                                                                    offset_x, offset_y);
        } else {
            math21_tool_assert(0);
        }
    } else if (type1 == m21_type_NumR) {
        if (type2 == m21_type_NumN8) {
            math21_template_vector_set_by_vector_opencl<NumR, NumN8>(n, x, stride_x, y, stride_y,
                                                                     offset_x, offset_y);
        } else if (type2 == m21_type_NumN) {
            math21_template_vector_set_by_vector_opencl<NumR, NumN>(n, x, stride_x, y, stride_y,
                                                                    offset_x, offset_y);
        } else if (type2 == m21_type_NumR) {
            math21_template_vector_set_by_vector_opencl<NumR, NumR>(n, x, stride_x, y, stride_y,
                                                                    offset_x, offset_y);
        } else {
            math21_tool_assert(0);
        }
    } else {
        math21_tool_assert(0);
    }
}

void math21_generic_matrix_set_by_matrix_opencl(NumN d1, NumN d2,
                                                PointerVoidInputWrapper x, NumN d1_x, NumN d2_x, NumN stride1_x,
                                                NumN stride2_x,
                                                PointerVoidWrapper y, NumN d1_y, NumN d2_y, NumN stride1_y,
                                                NumN stride2_y,
                                                NumN offset_x, NumN offset_y, NumN type) {
    if (type == m21_type_NumR) {
        math21_template_matrix_set_by_matrix_opencl<NumR>(d1, d2,
                                                          x, d1_x, d2_x, stride1_x, stride2_x,
                                                          y, d1_y, d2_y, stride1_y, stride2_y,
                                                          offset_x, offset_y);
    } else if (type == m21_type_NumR32) {
        math21_template_matrix_set_by_matrix_opencl<NumR32>(d1, d2,
                                                            x, d1_x, d2_x, stride1_x, stride2_x,
                                                            y, d1_y, d2_y, stride1_y, stride2_y,
                                                            offset_x, offset_y);
    } else if (type == m21_type_NumR64) {
        math21_template_matrix_set_by_matrix_opencl<NumR64>(d1, d2,
                                                            x, d1_x, d2_x, stride1_x, stride2_x,
                                                            y, d1_y, d2_y, stride1_y, stride2_y,
                                                            offset_x, offset_y);
    } else {
        math21_tool_assert(0);
    }
}

void math21_generic_tensor_3d_set_by_tensor_3d_opencl(NumN d1, NumN d2, NumN d3,
                                                      PointerVoidInputWrapper x, NumN d1_x, NumN d2_x, NumN d3_x,
                                                      NumN stride1_x, NumN stride2_x, NumN stride3_x,
                                                      PointerVoidWrapper y, NumN d1_y, NumN d2_y, NumN d3_y,
                                                      NumN stride1_y, NumN stride2_y, NumN stride3_y,
                                                      NumN offset_x, NumN offset_y, NumN type) {
    if (type == m21_type_NumR) {
        math21_template_tensor_3d_set_by_tensor_3d_opencl<NumR>(d1, d2, d3,
                                                                x, d1_x, d2_x, d3_x,
                                                                stride1_x, stride2_x, stride3_x,
                                                                y, d1_y, d2_y, d3_y,
                                                                stride1_y, stride2_y, stride3_y,
                                                                offset_x, offset_y);
    } else if (type == m21_type_NumR32) {
        math21_template_tensor_3d_set_by_tensor_3d_opencl<NumR32>(d1, d2, d3,
                                                                  x, d1_x, d2_x, d3_x,
                                                                  stride1_x, stride2_x, stride3_x,
                                                                  y, d1_y, d2_y, d3_y,
                                                                  stride1_y, stride2_y, stride3_y,
                                                                  offset_x, offset_y);
    } else if (type == m21_type_NumR64) {
        math21_template_tensor_3d_set_by_tensor_3d_opencl<NumR64>(d1, d2, d3,
                                                                  x, d1_x, d2_x, d3_x,
                                                                  stride1_x, stride2_x, stride3_x,
                                                                  y, d1_y, d2_y, d3_y,
                                                                  stride1_y, stride2_y, stride3_y,
                                                                  offset_x, offset_y);
    } else {
        math21_tool_assert(0);
    }
}

void math21_generic_tensor_3d_f_set_by_tensor_3d_opencl(NumN fname, NumN d1, NumN d2, NumN d3,
                                                        PointerVoidInputWrapper x, NumN d1_x, NumN d2_x, NumN d3_x,
                                                        NumN stride1_x, NumN stride2_x, NumN stride3_x,
                                                        PointerVoidWrapper y, NumN d1_y, NumN d2_y, NumN d3_y,
                                                        NumN stride1_y, NumN stride2_y, NumN stride3_y,
                                                        NumN offset_x, NumN offset_y, NumN type) {
    if (type == m21_type_NumR) {
        math21_template_tensor_3d_f_set_by_tensor_3d_opencl<NumR>(fname, d1, d2, d3,
                                                                  x, d1_x, d2_x, d3_x,
                                                                  stride1_x, stride2_x, stride3_x,
                                                                  y, d1_y, d2_y, d3_y,
                                                                  stride1_y, stride2_y, stride3_y,
                                                                  offset_x, offset_y);
    } else if (type == m21_type_NumR32) {
        math21_template_tensor_3d_f_set_by_tensor_3d_opencl<NumR32>(fname, d1, d2, d3,
                                                                    x, d1_x, d2_x, d3_x,
                                                                    stride1_x, stride2_x, stride3_x,
                                                                    y, d1_y, d2_y, d3_y,
                                                                    stride1_y, stride2_y, stride3_y,
                                                                    offset_x, offset_y);
    } else if (type == m21_type_NumR64) {
        math21_template_tensor_3d_f_set_by_tensor_3d_opencl<NumR64>(fname, d1, d2, d3,
                                                                    x, d1_x, d2_x, d3_x,
                                                                    stride1_x, stride2_x, stride3_x,
                                                                    y, d1_y, d2_y, d3_y,
                                                                    stride1_y, stride2_y, stride3_y,
                                                                    offset_x, offset_y);
    } else {
        math21_tool_assert(0);
    }
}

void math21_generic_vector_set_by_value_opencl(NumN n, NumR value, PointerVoidWrapper x, NumN stride_x, NumN type) {
    if (type == m21_type_NumN8) {
        math21_template_vector_set_by_value_opencl<NumN8>(n, (NumN8) value, x, stride_x);
    } else if (type == m21_type_NumN) {
        math21_template_vector_set_by_value_opencl<NumN>(n, (NumN) value, x, stride_x);
    } else if (type == m21_type_NumR) {
        math21_template_vector_set_by_value_opencl<NumR>(n, (NumR) value, x, stride_x);
    } else if (type == m21_type_NumR32) {
        math21_template_vector_set_by_value_opencl<NumR32>(n, (NumR32) value, x, stride_x);
    } else if (type == m21_type_NumR64) {
        math21_template_vector_set_by_value_opencl<NumR64>(n, (NumR64) value, x, stride_x);
    } else {
        math21_tool_assert(0);
    }
}

void math21_generic_vector_xy_opencl(NumN n, PointerVoidInputWrapper x, NumN stride_x,
                                     PointerVoidWrapper y, NumN stride_y, NumN type) {
    if (type == m21_type_NumR) {
        math21_template_vector_xy_opencl<NumR>(n, x, stride_x, y, stride_y);
    } else if (type == m21_type_NumR32) {
        math21_template_vector_xy_opencl<NumR32>(n, x, stride_x, y, stride_y);
    } else if (type == m21_type_NumR64) {
        math21_template_vector_xy_opencl<NumR64>(n, x, stride_x, y, stride_y);
    } else {
        math21_tool_assert(0);
    }
}

void math21_generic_vector_sin_opencl(NumN n, PointerVoidInputWrapper x, PointerVoidWrapper y, NumN type) {
    if (type == m21_type_NumR) {
        math21_template_vector_sin_opencl<NumR>(n, x, y);
    } else if (type == m21_type_NumR32) {
        math21_template_vector_sin_opencl<NumR32>(n, x, y);
    } else if (type == m21_type_NumR64) {
        math21_template_vector_sin_opencl<NumR64>(n, x, y);
    } else {
        math21_tool_assert(0);
    }
}

void math21_generic_vector_cos_opencl(NumN n, PointerVoidInputWrapper x, PointerVoidWrapper y, NumN type) {
    if (type == m21_type_NumR) {
        math21_template_vector_cos_opencl<NumR>(n, x, y);
    } else if (type == m21_type_NumR32) {
        math21_template_vector_cos_opencl<NumR32>(n, x, y);
    } else if (type == m21_type_NumR64) {
        math21_template_vector_cos_opencl<NumR64>(n, x, y);
    } else {
        math21_tool_assert(0);
    }
}

void
math21_generic_vector_addToC_opencl(NumN n, PointerVoidInputWrapper A, PointerVoidInputWrapper B, PointerVoidWrapper C,
                                    NumN type) {
    if (type == m21_type_NumN) {
        math21_template_vector_addToC_opencl<NumN>(n, A, B, C);
    } else if (type == m21_type_NumR) {
        math21_template_vector_addToC_opencl<NumR>(n, A, B, C);
    } else if (type == m21_type_NumR32) {
        math21_template_vector_addToC_opencl<NumR32>(n, A, B, C);
    } else if (type == m21_type_NumR64) {
        math21_template_vector_addToC_opencl<NumR64>(n, A, B, C);
    } else {
        math21_tool_assert(0);
    }
}

void
math21_generic_vector_mulToC_opencl(NumN n, PointerVoidInputWrapper A, PointerVoidInputWrapper B, PointerVoidWrapper C,
                                    NumN type) {
    if (type == m21_type_NumR) {
        math21_template_vector_mulToC_opencl<NumR>(n, A, B, C);
    } else if (type == m21_type_NumR32) {
        math21_template_vector_mulToC_opencl<NumR32>(n, A, B, C);
    } else if (type == m21_type_NumR64) {
        math21_template_vector_mulToC_opencl<NumR64>(n, A, B, C);
    } else {
        math21_tool_assert(0);
    }
}

void math21_generic_broadcast_in_dn_opencl(NumN n, PointerVoidInputWrapper x, PointerVoidWrapper y,
                                           NumN dims_x, PointerNumNInputWrapper dx,
                                           NumN dims_y, PointerNumNInputWrapper dy,
                                           NumN type) {
    if (type == m21_type_NumR) {
        math21_template_vector_broadcast_in_dn_opencl<NumR>(n, x, y, dims_x, dx, dims_y, dy);
    } else if (type == m21_type_NumR32) {
        math21_template_vector_broadcast_in_dn_opencl<NumR32>(n, x, y, dims_x, dx, dims_y, dy);
    } else if (type == m21_type_NumR64) {
        math21_template_vector_broadcast_in_dn_opencl<NumR64>(n, x, y, dims_x, dx, dims_y, dy);
    } else {
        math21_tool_assert(0);
    }
}

void math21_generic_optimization_adam_update_part_2_opencl(
        NumN x_size, PointerVoidWrapper x, PointerVoidInputWrapper m, PointerVoidInputWrapper v,
        NumR beta1, NumR beta2, NumR alpha, NumR eps, NumN t, NumN type) {
    if (type == m21_type_NumR) {
        math21_template_optimization_adam_update_part_2_opencl<NumR>(
                x_size, x, m, v, (NumR) beta1, (NumR) beta2,
                (NumR) alpha, (NumR) eps, t);
    } else if (type == m21_type_NumR32) {
        math21_template_optimization_adam_update_part_2_opencl<NumR32>(
                x_size, x, m, v, (NumR32) beta1, (NumR32) beta2,
                (NumR32) alpha, (NumR32) eps, t);
    } else if (type == m21_type_NumR64) {
        math21_template_optimization_adam_update_part_2_opencl<NumR64>(
                x_size, x, m, v, (NumR64) beta1, (NumR64) beta2,
                (NumR64) alpha, (NumR64) eps, t);
    } else {
        math21_tool_assert(0);
    }
}

#endif