#include <math21_kernels.h>

//#define MATH21_IS_FROM_CPU

#if !defined(MATH21_IS_FROM_CPU)
#if defined(MATH21_FLAG_USE_CUDA)
#define MATH21_IS_FROM_CUDA
#elif defined(MATH21_FLAG_USE_OPENCL)
#define MATH21_IS_FROM_OPENCL
#endif
#endif

#if defined(MATH21_IS_FROM_CPU)
#define MATH21_MAKE_KERNEL_NAME_1(X) MATH21_MACRO_CAT_2(X, cpu_kernel)
#define MATH21_MAKE_KERNEL_NAME_2(X) MATH21_MACRO_CAT_2(X, cpu_kernel)
#define MATH21_MAKE_KERNEL_NAME_3(X) MATH21_MACRO_CAT_2(X, cpu_kernel)
#define MATH21_MAKE_KERNEL_NAME_PAIR(X, Y) MATH21_MACRO_CAT_2(X, cpu_kernel)
#define MATH21_KERNEL_GET_ID()
#define MATH21_KERNEL_TEMPLATE_HEADER(X) template<typename X>
#define MATH21_KERNEL_EXPORT
#define MATH21_KERNEL_GLOBAL
#define MATH21_KERNEL_INPUT_ID , NumN id
#define MATH21_DEVICE_F_MIN_LIKE_PTR math21_type_f_min_like f_shrink_min_like_ptr,
#define MATH21_DEVICE_F_ARGMIN_LIKE_PTR math21_type_f_argmin_like f_shrink_argmin_like_ptr,
#define MATH21_DEVICE_F_ADD_LIKE_PTR math21_type_f_add_like f_bc_add_like_ptr,
#define MATH21_DEVICE_F_SIN_LIKE_PTR math21_type_f_sin_like f_bc_sin_like_ptr,
#define MATH21_DEVICE_F_KX_LIKE_PTR math21_type_f_kx_like f_kx_like_ptr,
#define MATH21_DEVICE_F_ADDTO_LIKE_PTR math21_type_f_addto_like f_addto_like_ptr,
#define MATH21_DEVICE_MAKE_F_LIKE_PTR(X, Y) X Y,

#elif defined(MATH21_IS_FROM_CUDA)
#define MATH21_MAKE_KERNEL_NAME_1(X) MATH21_MACRO_CAT_2(X, cuda_kernel)
#define MATH21_MAKE_KERNEL_NAME_2(X) MATH21_MACRO_CAT_2(X, cuda_kernel)
#define MATH21_MAKE_KERNEL_NAME_3(X) MATH21_MACRO_CAT_2(X, cuda_kernel)
#define MATH21_MAKE_KERNEL_NAME_PAIR(X, Y) MATH21_MACRO_CAT_2(X, cuda_kernel)
#define MATH21_KERNEL_GET_ID() int id = (blockIdx.x + blockIdx.y * gridDim.x) * blockDim.x + threadIdx.x; id +=1;
#define MATH21_KERNEL_TEMPLATE_HEADER(X) template<typename X>
#define MATH21_KERNEL_EXPORT __global__
#define MATH21_KERNEL_GLOBAL
#define MATH21_KERNEL_INPUT_ID
#define MATH21_DEVICE_F_MIN_LIKE_PTR math21_type_f_min_like f_shrink_min_like_ptr,
#define MATH21_DEVICE_F_ARGMIN_LIKE_PTR math21_type_f_argmin_like f_shrink_argmin_like_ptr,
#define MATH21_DEVICE_F_ADD_LIKE_PTR math21_type_f_add_like f_bc_add_like_ptr,
#define MATH21_DEVICE_F_SIN_LIKE_PTR math21_type_f_sin_like f_bc_sin_like_ptr,
#define MATH21_DEVICE_F_KX_LIKE_PTR math21_type_f_kx_like f_kx_like_ptr,
#define MATH21_DEVICE_F_ADDTO_LIKE_PTR math21_type_f_addto_like f_addto_like_ptr,
#define MATH21_DEVICE_MAKE_F_LIKE_PTR(X, Y) X Y,

#elif defined(MATH21_IS_FROM_OPENCL)
#define MATH21_MAKE_KERNEL_NAME_1(X) MATH21_OPENCL_TEMPLATE_3(X, opencl_kernel, NumReal)
#define MATH21_MAKE_KERNEL_NAME_2(X) MATH21_OPENCL_TEMPLATE_4(X, opencl_kernel, NumReal, f_shrink_min_like_ptr)
#define MATH21_MAKE_KERNEL_NAME_3(X) MATH21_OPENCL_TEMPLATE_4(X, opencl_kernel, NumReal, f_shrink_argmin_like_ptr)
#define MATH21_MAKE_KERNEL_NAME_PAIR(X, Y) MATH21_OPENCL_TEMPLATE_4(X, opencl_kernel, NumReal, Y)
#define MATH21_KERNEL_GET_ID() size_t global_x = get_global_id(0); size_t global_y = get_global_id(1); size_t global_z = get_global_id(2); size_t id = global_z * get_global_size(0) * get_global_size(1) + global_y * get_global_size(0) + global_x; id +=1;
#define MATH21_KERNEL_TEMPLATE_HEADER(X)
#define MATH21_KERNEL_EXPORT __kernel
#define MATH21_KERNEL_GLOBAL __global
#define MATH21_KERNEL_INPUT_ID
#define MATH21_DEVICE_F_MIN_LIKE_PTR
#define MATH21_DEVICE_F_ARGMIN_LIKE_PTR
#define MATH21_DEVICE_F_ADD_LIKE_PTR
#define MATH21_DEVICE_F_SIN_LIKE_PTR
#define MATH21_DEVICE_F_KX_LIKE_PTR
#define MATH21_DEVICE_F_ADDTO_LIKE_PTR
#define MATH21_DEVICE_MAKE_F_LIKE_PTR(X, Y)

#else
#error MATH21_IS_FROM_NONE
#endif

#if defined(MATH21_IS_FROM_OPENCL)
#include <math21_opencl_device_code.h>
#endif

// C = k1*A*B + k2*C
MATH21_KERNEL_TEMPLATE_HEADER(NumReal)
MATH21_KERNEL_EXPORT void MATH21_MAKE_KERNEL_NAME_1(math21_template_matrix_multiply_onto_k1AB_add_k2C_similar_nn_naive)(
        NumN size, NumN nr_C, NumN nc_C, NumN n_common, NumReal k1,
        MATH21_KERNEL_GLOBAL const NumReal *A, NumN stride_a,
        MATH21_KERNEL_GLOBAL const NumReal *B, NumN stride_b,
        NumReal k2,
        MATH21_KERNEL_GLOBAL NumReal *C, NumN stride_c MATH21_KERNEL_INPUT_ID) {
    MATH21_KERNEL_GET_ID();
#if defined(MATH21_IS_FROM_OPENCL)
    A -= 1;
    B -= 1;
    C -= 1;
#endif
    if (id > size) return;
    NumN i, j, ia, ib, ic;
    math21_device_index_1d_to_2d_fast(&i, &j, id, nc_C);
    NumN k;
    NumReal sum = 0;
    for (k = 1; k <= n_common; ++k) {
        math21_device_index_2d_to_1d_fast(i, k, &ia, stride_a);
        math21_device_index_2d_to_1d_fast(k, j, &ib, stride_b);
        sum += A[ia] * B[ib];
    }
    math21_device_index_2d_to_1d_fast(i, j, &ic, stride_c);
    C[ic] = k1 * sum + k2 * C[ic];
}

// C = k1*A*B.t + k2*C
MATH21_KERNEL_TEMPLATE_HEADER(NumReal)
MATH21_KERNEL_EXPORT void MATH21_MAKE_KERNEL_NAME_1(math21_template_matrix_multiply_onto_k1AB_add_k2C_similar_nt_naive)(
        NumN size, NumN nr_C, NumN nc_C, NumN n_common, NumReal k1,
        MATH21_KERNEL_GLOBAL const NumReal *A, NumN stride_a,
        MATH21_KERNEL_GLOBAL const NumReal *B, NumN stride_b,
        NumReal k2,
        MATH21_KERNEL_GLOBAL NumReal *C, NumN stride_c MATH21_KERNEL_INPUT_ID) {
    MATH21_KERNEL_GET_ID();
#if defined(MATH21_IS_FROM_OPENCL)
    A -= 1;
    B -= 1;
    C -= 1;
#endif
    if (id > size) return;
    NumN i, j, ia, ib, ic;
    math21_device_index_1d_to_2d_fast(&i, &j, id, nc_C);
    NumN k;
    NumReal sum = 0;
    for (k = 1; k <= n_common; ++k) {
        math21_device_index_2d_to_1d_fast(i, k, &ia, stride_a);
        math21_device_index_2d_to_1d_fast(j, k, &ib, stride_b);
        sum += A[ia] * B[ib];
    }
    math21_device_index_2d_to_1d_fast(i, j, &ic, stride_c);
    C[ic] = k1 * sum + k2 * C[ic];
}

// C = k1*A.t*B + k2*C
MATH21_KERNEL_TEMPLATE_HEADER(NumReal)
MATH21_KERNEL_EXPORT void MATH21_MAKE_KERNEL_NAME_1(math21_template_matrix_multiply_onto_k1AB_add_k2C_similar_tn_naive)(
        NumN size, NumN nr_C, NumN nc_C, NumN n_common, NumReal k1,
        MATH21_KERNEL_GLOBAL const NumReal *A, NumN stride_a,
        MATH21_KERNEL_GLOBAL const NumReal *B, NumN stride_b,
        NumReal k2,
        MATH21_KERNEL_GLOBAL NumReal *C, NumN stride_c MATH21_KERNEL_INPUT_ID) {
    MATH21_KERNEL_GET_ID();
#if defined(MATH21_IS_FROM_OPENCL)
    A -= 1;
    B -= 1;
    C -= 1;
#endif
    if (id > size) return;
    NumN i, j, ia, ib, ic;
    math21_device_index_1d_to_2d_fast(&i, &j, id, nc_C);
    NumN k;
    NumReal sum = 0;
    for (k = 1; k <= n_common; ++k) {
        math21_device_index_2d_to_1d_fast(k, i, &ia, stride_a);
        math21_device_index_2d_to_1d_fast(k, j, &ib, stride_b);
        sum += A[ia] * B[ib];
    }
    math21_device_index_2d_to_1d_fast(i, j, &ic, stride_c);
    C[ic] = k1 * sum + k2 * C[ic];
}

// C = k1*A.t*B.t + k2*C
MATH21_KERNEL_TEMPLATE_HEADER(NumReal)
MATH21_KERNEL_EXPORT void MATH21_MAKE_KERNEL_NAME_1(math21_template_matrix_multiply_onto_k1AB_add_k2C_similar_tt_naive)(
        NumN size, NumN nr_C, NumN nc_C, NumN n_common, NumReal k1,
        MATH21_KERNEL_GLOBAL const NumReal *A, NumN stride_a,
        MATH21_KERNEL_GLOBAL const NumReal *B, NumN stride_b,
        NumReal k2,
        MATH21_KERNEL_GLOBAL NumReal *C, NumN stride_c MATH21_KERNEL_INPUT_ID) {
    MATH21_KERNEL_GET_ID();
#if defined(MATH21_IS_FROM_OPENCL)
    A -= 1;
    B -= 1;
    C -= 1;
#endif
    if (id > size) return;
    NumN i, j, ia, ib, ic;
    math21_device_index_1d_to_2d_fast(&i, &j, id, nc_C);
    NumN k;
    NumReal sum = 0;
    for (k = 1; k <= n_common; ++k) {
        math21_device_index_2d_to_1d_fast(k, i, &ia, stride_a);
        math21_device_index_2d_to_1d_fast(j, k, &ib, stride_b);
        sum += A[ia] * B[ib];
    }
    math21_device_index_2d_to_1d_fast(i, j, &ic, stride_c);
    C[ic] = k1 * sum + k2 * C[ic];
}